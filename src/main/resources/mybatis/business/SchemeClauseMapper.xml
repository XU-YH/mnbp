<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mnbp.project.business.mapper.SchemeClauseMapper">

    <resultMap type="SchemeClause" id="SchemeClauseResult">
        <result property="id" column="id"/>
        <result property="schemeId" column="scheme_id"/>
        <result property="clauseName" column="clause_name"/>
        <result property="compensationLimit" column="compensation_limit"/>
        <result property="clauseContent" column="clause_content"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time"/>
        <result property="updateBy" column="update_by"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <resultMap id="SchemeClauseVOResult" type="SchemeClauseVO">
        <result property="id" column="id"/>
        <result property="schemeId" column="scheme_id"/>
        <result property="clauseName" column="clause_name"/>
        <result property="compensationLimit" column="compensation_limit"/>
        <result property="clauseContent" column="clause_content"/>
        <result property="schemeCode" column="scheme_code"/>
    </resultMap>

    <sql id="selectSchemeClauseVo">
        select id, scheme_id, clause_name, compensation_limit, clause_content, create_by, create_time, update_by, update_time from scheme_clause
    </sql>

    <select id="selectSchemeClauseList" parameterType="SchemeClauseBO" resultMap="SchemeClauseVOResult">
        select c.*, s.scheme_code
        from scheme_clause c, insurance_scheme s
        <where>
            c.scheme_id = s.id
            <if test="schemeCode != null and schemeCode != ''">and s.scheme_code = #{schemeCode}</if>
            <if test="clauseName != null  and clauseName != ''">and c.clause_name like concat('%', #{clauseName}, '%')
            </if>
        </where>
    </select>

    <select id="selectSchemeClauseById" parameterType="Integer" resultMap="SchemeClauseResult">
        <include refid="selectSchemeClauseVo"/>
        where id = #{id}
    </select>

    <insert id="insertSchemeClause" parameterType="SchemeClause" useGeneratedKeys="true" keyProperty="id">
        insert into scheme_clause
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="schemeId != null ">scheme_id,</if>
            <if test="clauseName != null  and clauseName != ''">clause_name,</if>
            <if test="compensationLimit != null ">compensation_limit,</if>
            <if test="clauseContent != null  and clauseContent != ''">clause_content,</if>
            <if test="createBy != null  and createBy != ''">create_by,</if>
            <if test="createTime != null ">create_time,</if>
            <if test="updateBy != null  and updateBy != ''">update_by,</if>
            <if test="updateTime != null ">update_time,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="schemeId != null ">#{schemeId},</if>
            <if test="clauseName != null  and clauseName != ''">#{clauseName},</if>
            <if test="compensationLimit != null ">#{compensationLimit},</if>
            <if test="clauseContent != null  and clauseContent != ''">#{clauseContent},</if>
            <if test="createBy != null  and createBy != ''">#{createBy},</if>
            <if test="createTime != null ">#{createTime},</if>
            <if test="updateBy != null  and updateBy != ''">#{updateBy},</if>
            <if test="updateTime != null ">#{updateTime},</if>
        </trim>
    </insert>

    <update id="updateSchemeClause" parameterType="SchemeClause">
        update scheme_clause
        <trim prefix="SET" suffixOverrides=",">
            <if test="schemeId != null ">scheme_id = #{schemeId},</if>
            <if test="clauseName != null  and clauseName != ''">clause_name = #{clauseName},</if>
            <if test="compensationLimit != null ">compensation_limit = #{compensationLimit},</if>
            <if test="clauseContent != null  and clauseContent != ''">clause_content = #{clauseContent},</if>
            <if test="createBy != null  and createBy != ''">create_by = #{createBy},</if>
            <if test="createTime != null ">create_time = #{createTime},</if>
            <if test="updateBy != null  and updateBy != ''">update_by = #{updateBy},</if>
            <if test="updateTime != null ">update_time = #{updateTime},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteSchemeClauseById" parameterType="Integer">
        delete from scheme_clause where id = #{id}
    </delete>

    <delete id="deleteSchemeClauseByIds" parameterType="String">
        delete from scheme_clause where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

</mapper>